import React, { useEffect, useState } from 'react'
import GithubSimpleTable from '../../../components/tables/GithubSimpleTable'
import { Badge, Box, BlockStack, LegacyCard, Link, List, Text, InlineStack } from '@shopify/polaris'
import GetPrettifyEndpoint from '../../observe/GetPrettifyEndpoint'
import SampleDataComponent from '../../../components/shared/SampleDataComponent'

const Issue = ({ vulnerableApi, references, cwes }) => {
    const [vulnerableApisState, setVulnerableApisState] = useState([])
    const [vulnerableResultSampleData, setVulnerableResultSampleData] = useState({})

    const testResults = vulnerableApi.testResults

    const resourceName = {
        singular: 'API',
        plural: 'APIs',
    }

    const getTestResultLink = () => {
        const firstVulnerableApi = vulnerableApi
        const testRunResultSummaryHexId = firstVulnerableApi.testRunHexId
        const testRunId = firstVulnerableApi.hexId  

        return `/dashboard/testing/${testRunResultSummaryHexId}?result=${testRunId}`
    }
    const testResultLink = getTestResultLink()

    const apisHeader = (
        <InlineStack align="space-between">
           <Text variant="headingSm" fontWeight='bold'>API affected</Text>
           <Link url={testResultLink} removeUnderline target="_blank">
               <Text variant='bodyMd'>See in Akto</Text>
           </Link>   
       </InlineStack>
    )
    const headers = [
        {
            text: apisHeader,
            title: apisHeader,
            value: 'apiDetails',
            textValue: 'apiDetailsText'
        }
    ]                
    
    const getSampleData = () => {
        const vulnerableResult = testResults.find(result => result.vulnerable)
        let extractedData = {}

        if (vulnerableResult) {
            if (vulnerableResult.nodeResultMap) {
                const nodeData = Object.values(vulnerableResult.nodeResultMap)[0]
                extractedData = {
                    originalMessage: '',
                    message: nodeData.message || '',
                    highlightPaths: []
                }
            } else {
                extractedData = {
                    originalMessage: vulnerableResult.originalMessage || '',
                    message: vulnerableResult.message || '',
                    highlightPaths: []
                }
            }
        }

        setVulnerableResultSampleData(extractedData)
    }

    useEffect(() => {
        const { url, method } = vulnerableApi.apiInfoKey
    
        const apiDetails = (
            <GetPrettifyEndpoint method={method} url={url} isNew={false} />
        )
        
        let vulnerableApis = [{
            key: `${method} ${url}`,
            apiDetailsText: `${method} ${url}`,
            apiDetails: apiDetails,
        }]
    
        setVulnerableApisState(vulnerableApis)
        getSampleData()
    }, [])

    return (
        <>
            <Box id='affected-api-table-container'>
                <GithubSimpleTable
                    key="table"
                    data={vulnerableApisState}
                    resourceName={resourceName}
                    headers={headers}
                    useNewRow={true}
                    condensedHeight={true}
                    hideQueryField={true}
                    headings={headers}
                    hidePagination={true}
                    showFooter={false}
                />
            </Box>

            <BlockStack gap={100}>
                <Text variant="headingSm">Evidence</Text>
                <BlockStack gap={200}>
                    {
                        ["request","response"].map((type) => {
                        return (
                            <Box key={type}>
                            <LegacyCard>
                                <SampleDataComponent
                                    type={type}
                                    sampleData={vulnerableResultSampleData}
                                    minHeight={'250px'}
                                    showDiff={false}
                                    isNewDiff={false}
                                    useDynamicHeight={true}
                                />
                            </LegacyCard>
                            </Box>
                        )
                        })
                    }
                </BlockStack>
            </BlockStack>

            <BlockStack gap={100}>
                <Text variant="headingSm">References</Text>
                <List type="number">
                    {
                        references?.map((reference) => {
                            return (
                                <List.Item>
                                    <Link target="_blank" url={reference}><Text color="subdued">{reference}</Text></Link>
                                </List.Item>
                            )
                        })
                    }
                </List>
            </BlockStack>

            <BlockStack gap={100}>
                <Text variant="headingSm">CWE</Text>
                <InlineStack gap={2}>
                    {
                        cwes?.map((cweItem) => {
                            return (
                                <Box>
                                    <Badge size="small">{cweItem}</Badge>
                                </Box>
                            )
                        })
                    }
                </InlineStack>
            </BlockStack>
        </>
    )
}

export default Issue